#! /bin/sh

die() {
    echo
    echo "$@"
    exit 1
}

BASEDIR="$(dirname "$(readlink -f "$0")")"

[ -d /cache/nginx ] || sudo mkdir /cache/nginx
[ -d /cache/npm ] || sudo mkdir /cache/npm
[ -d /cache/nuget ] || sudo mkdir /cache/nuget
[ -d /cache/nuget/api.nuget.local ] || sudo mkdir /cache/nuget/api.nuget.local
[ -d /cache/nuget/funfair.nuget.local ] || sudo mkdir /cache/nuget/funfair.nuget.local
[ -d /cache/nuget/funfair-prerelease.nuget.local ] || sudo mkdir /cache/nuget/funfair-prerelease.nuget.local
[ -d /cache/npm/storage ] || sudo mkdir /cache/npm/storage
[ -d /cache/proxy ] || sudo mkdir /cache/proxy
[ -d /cache/downloads ] || sudo mkdir /cache/downloads
[ -d /cache/dotnet ] || sudo mkdir /cache/dotnet

git pull

sudo chown -R 10001:65533 /cache/npm || die "Could not set npm permissions"
sudo chown -R 1654:1654 /cache/nuget || die "Could not set nuget permissions"
sudo chown -R 1654:1654 /cache/proxy || die "Could not set proxy permissions"
sudo chown -R 998:998 /cache/downloads || die "Could not set cache permissions"
sudo chown -R 998:998 /cache/dotnet || die "Could not set cache permissions"

export COMPOSE_BAKE=true

if [ ! -f "$BASEDIR/certs/dh.pem" ]; then
  echo "Generating PFS"
  openssl dhparam -out "$BASEDIR/certs/dh.pem" 4096
fi

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/downloads \
  cache_downloads

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/dotnet \
  cache_dotnet

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/proxy \
  cache_proxy


sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/nuget/api.nuget.local \
  cache_api_nuget_org

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/nuget/funfair.nuget.local \
  cache_funfair_release

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/nuget/funfair-prerelease.nuget.local \
  cache_funfair_prerelease

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/npm/storage \
  cache_npm_storage

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/npm/storage \
  cache_npm_storage

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/npm/storage \
  cache_npm_storage

sudo docker volume create \
  --opt type=none \
  --opt o=bind \
  --opt device=/cache/nginx \
  cache_nginx

sudo docker compose pull || die "Could not pull images"

sudo docker compose up -d --remove-orphans || die "Could not start containers"


